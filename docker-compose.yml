version: "3.8"

services:
  # Main API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tiktok_api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - ENSEMBLEDATA_TOKEN=${ENSEMBLEDATA_TOKEN}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/tiktok_api
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    networks:
      - tiktok_network
    deploy:
      resources:
        limits:
          cpus: "1.00"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tiktok_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - tiktok_network

  # PostgreSQL Database (for future features)
  postgres:
    image: postgres:15-alpine
    container_name: tiktok_postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=tiktok_api
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - tiktok_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tiktok_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - tiktok_network

  # Redis Commander (Management UI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: tiktok_redis_ui
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - tiktok_network

volumes:
  redis_data:
  postgres_data:

networks:
  tiktok_network:
    driver: bridge
